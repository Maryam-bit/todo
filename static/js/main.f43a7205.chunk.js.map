{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","add_todo","setState","todos","state","value","delete_todos","index","splice","edit_todos","updated_todo","prompt","this","onChange","e","target","type","placeholder","onClick","map","v","i","key","className","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6NAsDeA,G,wDAlDb,aAAc,IAAD,8BACX,gBAMAC,SAAW,WACT,EAAKC,SAAS,CACZC,MAAM,GAAD,mBAAK,EAAKC,MAAMD,OAAhB,CAAuB,EAAKC,MAAMC,QACvCA,MAAM,MAVC,EAcXC,aAAe,SAACC,GACd,EAAKH,MAAMD,MAAMK,OAAOD,EAAM,GAC9B,EAAKL,SAAS,CACZC,MAAM,EAAKC,MAAMD,SAjBV,EAqBXM,WAAa,SAACF,GACZ,IAAIG,EAAeC,OAAO,sBAC1B,EAAKP,MAAMD,MAAMI,GAAOG,EACxB,EAAKR,SAAS,CACZC,MAAM,EAAKC,MAAMD,SAvBrB,EAAKC,MAAM,CACTD,MAAO,CAAC,SAAW,SACnBE,MAAM,IAJG,E,qDA6BJ,IAAD,SACkBO,KAAKR,MAAvBD,EADA,EACAA,MAAQE,EADR,EACQA,MACd,OACE,6BACE,2BAAOA,MAAOA,EAAOQ,SAAU,SAACC,GAAD,OAAK,EAAKZ,SAAS,CAACG,MAAQS,EAAEC,OAAOV,SAASW,KAAK,OAAOC,YAAY,eACrG,4BAAQC,QAASN,KAAKX,UAAtB,YACA,4BACGE,EAAMgB,KAAI,SAACC,EAAEC,GACZ,OAAO,wBAAIC,IAAKD,GAAID,EAEpB,4BAAQG,UAAU,kBAAkBL,QAAS,kBAAK,EAAKZ,aAAae,KAApE,UACA,4BAAQH,QAAS,kBAAK,EAAKT,WAAWY,KAAtC,kB,GAzCMG,IAAMC,YCSJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.f43a7205.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass App extends React.Component{\n  constructor(){\n    super()\n    this.state={\n      todos: ['Maryam' , 'Ghous'],\n      value:''\n    }\n  }\n    add_todo = () => {\n      this.setState({\n        todos:[...this.state.todos, this.state.value],\n        value:''\n      })\n    }\n\n    delete_todos = (index) => {\n      this.state.todos.splice(index,1)\n      this.setState({\n        todos:this.state.todos\n      })\n    }\n\n    edit_todos = (index) => {\n      var updated_todo = prompt('enter updated todo');\n      this.state.todos[index]=updated_todo\n      this.setState({\n        todos:this.state.todos\n      })\n    }\n  \n  render(){\n    let { todos , value } = this.state;\n    return(\n      <div>\n        <input value={value} onChange={(e)=>this.setState({value : e.target.value})} type=\"text\" placeholder=\"enter todo\"/>\n        <button onClick={this.add_todo}>Add todo</button>\n        <ul>\n          {todos.map((v,i)=>{\n            return <li key={i}>{v}\n\n            <button className='btn btn-primary' onClick={()=> this.delete_todos(i)}>delete</button>\n            <button onClick={()=> this.edit_todos(i)}>edit</button>\n            </li>\n            \n          })}\n        </ul>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n "],"sourceRoot":""}